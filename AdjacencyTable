//定义边
typedef struct ArcNode{
	int adjvex;		//边另一头的节点
	struct ArcNode *nextarc;		//边
}ArcNode;
//定义顶点
typedef struct VexNode {
	char data;	//顶点信息
	ArcNode *firstarc;	//边
}VexNode, AdjList[10];
//定义邻接表
typedef struct {
	AdjList vertices;	//表本体
	int vexnum, arcnum;		//额外信息，顶点、边总数
}ALGraph;


/*
输入格式：
5 6		//顶点数，边数
A B C D E	//五个顶点的名字
A C 
A E 
B C 
C D 
D E 
E B 
*/

#include <iostream>

using namespace std;

//定义边
typedef struct ArcNode{
	int adjvex;		//边另一头的节点
	struct ArcNode *nextarc;		//边
}ArcNode;
//定义顶点
typedef struct VexNode {
	char data;	//顶点信息
	struct ArcNode *firstarc;	//边
}VexNode, AdjList[10];
//定义邻接表
typedef struct {
	AdjList vertices;	//表本体
	int vexnum, arcnum;		//额外信息，顶点、边总数
}ALGraph;

//函数声明
void Create(ALGraph &G);
int Locate(ALGraph G, char v);
void DFS(ALGraph G, int v);

bool visited[10] = { false };	//已经被搜索到的顶点变为true,避免重复搜索

int main() {
	ALGraph graph;
	Create(graph);
	DFS(graph, 0);
	return 0;
}

//创建
void Create(ALGraph &G) {
	char v1, v2;	//存输入的两个边
	int x = 0, y = 0;	//存输入的两个边的编号下标
	ArcNode *p1, *p2;
	cin >> G.vexnum >> G.arcnum;
	for (int i = 0; i < G.vexnum; i++) {
		cin >> G.vertices[i].data;
		G.vertices[i].firstarc = NULL;	//初始化为空，避免野指针
	}
	//读入两点构建边
	for (int i = 0; i < G.arcnum; i++) {
		p1 = new ArcNode;
		p1->nextarc = NULL;
		p2 = new ArcNode;
		p2->nextarc = NULL;
		cin >> v1 >> v2;
		x = Locate(G, v1);
		y = Locate(G, v2);
		p1->adjvex = y;
		p2->adjvex = x;
		p1->nextarc = G.vertices[x].firstarc;
		G.vertices[x].firstarc = p1;
		p2->nextarc = G.vertices[y].firstarc;
		G.vertices[y].firstarc = p2;
	}
	cout << "创建完成" << endl;
}

//根据顶点名得到其对应的编号下标
int Locate(ALGraph G, char v) {
	int result = -1;
	for (int i = 0; i < G.vexnum; i++) {
		if (G.vertices[i].data == v) {
			result = i;
			break;
		}
	}
	return result;
}


//从编号为v的顶点开始深度优先搜索并输出顶点名
void DFS(ALGraph G, int v) {
	ArcNode *p = new ArcNode;	//编号为v的顶点的指针
	int w = 0;	//后一个指针的编号
	cout << G.vertices[v].data << endl;
	visited[v] = true;
	p = G.vertices[v].firstarc;
	while (p != NULL) {
		w = p->adjvex;
		if (visited[w] == false) {
			DFS(G, w);
		}
		p = p->nextarc;
	}
}
